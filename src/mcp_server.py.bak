"""
MCP-server for Lovdata RAG-agent.

Implementerer en Model Context Protocol (MCP) server som bruker stdio-transport
for å kommunisere med Claude og eksponere verktøy for å søke i lovdata.
"""

import asyncio
import json
import os
import sys
from typing import Any, Dict, List, Optional

# Legg til prosjektets rotmappe i sys.path for å støtte importer
sys.path.insert(0, os.path.abspath(os.path.dirname(os.path.dirname(__file__))))

# Sett miljøvariabelen LOG_LEVEL til INFO direkte før import av FastMCP
os.environ["LOG_LEVEL"] = "INFO"

from fastmcp import FastMCP
from shared.logging_config import logger, setup_logger
from src.utils import truncate_text

# Opprett en spesifikk logger for MCP-serveren
mcp_logger = setup_logger("mcp-server")

class LovdataMCPServer:
    """MCP-server for Lovdata RAG-agent."""
    
    def __init__(self):
        """Initialiser MCP-serveren."""
        self.mcp = FastMCP("Lovdata RAG")
        
        # Registrer verktøy
        self._register_tools()
        
        mcp_logger.info("MCP-server initialisert")
    
    def _register_tools(self):
        """Registrer verktøy for MCP-serveren."""
        
        @self.mcp.tool()
        async def semantic_search(query: str, top_k: int = 10) -> List[Dict[str, Any]]:
            """
            Søk etter relevante lovtekster basert på spørsmål eller søkeord.
            
            Args:
                query: Brukerens spørsmål eller søkeord
                top_k: Antall resultater som skal returneres (default: 10)
                
            Returns:
                Liste av resultater med id, score og utdrag
            """
            mcp_logger.info(f"Utfører semantisk søk med query: {query}, top_k: {top_k}")
            
            # Dummy-implementasjon for testing
            dummy_results = [
                {
                    "id": "lov-1814-05-17-1",
                    "score": 0.95,
                    "excerpt": "Kongeriket Norges Grunnlov, gitt i riksforsamlingen på Eidsvoll den 17. mai 1814, slik den lyder etter senere endringer."
                },
                {
                    "id": "lov-1992-07-17-100",
                    "score": 0.85,
                    "excerpt": "Lov om barneverntjenester (barnevernloven). Lovens formål er å sikre at barn og unge som lever under forhold som kan skade deres helse og utvikling, får nødvendig hjelp, omsorg og beskyttelse til rett tid."
                }
            ]
            
            # Begrens antall resultater til top_k
            results = dummy_results[:min(top_k, len(dummy_results))]
            
            mcp_logger.info(f"Søk fullført. Fant {len(results)} resultater.")
            return results
        
        @self.mcp.tool()
        async def get_document(id: str) -> str:
            """
            Hent komplett lovtekst basert på ID.
            
            Args:
                id: ID for dokumentet som skal hentes
                
            Returns:
                Fullstendig lovtekst som ren tekst
            """
            mcp_logger.info(f"Henter dokument med id: {id}")
            
            # Dummy-implementasjon for testing
            if id == "lov-1814-05-17-1":
                return "Kongeriket Norges Grunnlov, gitt i riksforsamlingen på Eidsvoll den 17. mai 1814, slik den lyder etter senere endringer. § 1. Kongeriket Norge er et fritt, selvstendig, udelelig og uavhendelig rike."
            elif id == "lov-1992-07-17-100":
                return "Lov om barneverntjenester (barnevernloven). Lovens formål er å sikre at barn og unge som lever under forhold som kan skade deres helse og utvikling, får nødvendig hjelp, omsorg og beskyttelse til rett tid."
            else:
                return f"Lovtekst for {id} er ikke tilgjengelig."
    
    def run(self):
        """Start MCP-serveren med valgt transport."""
        mcp_logger.info(f"Starter MCP-server med transport: stdio")
        self.mcp.run(transport="stdio")


if __name__ == "__main__":
    server = LovdataMCPServer()
    server.run() 